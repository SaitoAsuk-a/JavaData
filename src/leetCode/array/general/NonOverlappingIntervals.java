package leetCode.array.general;

import lombok.experimental.UtilityClass;

import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

/**
 * @author liyu
 * date 2020/12/31 9:17
 * description 无重叠区间
 * 给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。
 * 注意:
 * 可以认为区间的终点总是大于它的起点。
 * 区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。
 * 示例 1:
 * 输入: [ [1,2], [2,3], [3,4], [1,3] ]
 * 输出: 1
 * 解释: 移除 [1,3] 后，剩下的区间没有重叠。
 * 示例 2:
 * 输入: [ [1,2], [1,2], [1,2] ]
 * 输出: 2
 * 解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。
 * 示例 3:
 * 输入: [ [1,2], [2,3] ]
 * 输出: 0
 * 解释: 你不需要移除任何区间，因为它们已经是无重叠的了。
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/non-overlapping-intervals
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
@UtilityClass
public class NonOverlappingIntervals {

    public static void main(String[] args) {
        int i = eraseOverlapIntervals(new int[][]{{1, 2}, {2, 3}, {3, 4}, {1, 3}});
        int j = eraseOverlapIntervals(new int[][]{{1, 2}, {1, 2}, {1, 2}});
        int k = eraseOverlapIntervals(new int[][]{{-100, -87}, {-99, -44}, {-98, -19}, {-97, -33}, {-96, -60}, {-95, -17}, {-94, -44}, {-93, -9}, {-92, -63}, {-91, -76}, {-90, -44}, {-89, -18}, {-88, 10}, {-87, -39}, {-86, 7}, {-85, -76}, {-84, -51}, {-83, -48}, {-82, -36}, {-81, -63}, {-80, -71}, {-79, -4}, {-78, -63}, {-77, -14}, {-76, -10}, {-75, -36}, {-74, 31}, {-73, 11}, {-72, -50}, {-71, -30}, {-70, 33}, {-69, -37}, {-68, -50}, {-67, 6}, {-66, -50}, {-65, -26}, {-64, 21}, {-63, -8}, {-62, 23}, {-61, -34}, {-60, 13}, {-59, 19}, {-58, 41}, {-57, -15}, {-56, 35}, {-55, -4}, {-54, -20}, {-53, 44}, {-52, 48}, {-51, 12}, {-50, -43}, {-49, 10}, {-48, -34}, {-47, 3}, {-46, 28}, {-45, 51}, {-44, -14}, {-43, 59}, {-42, -6}, {-41, -32}, {-40, -12}, {-39, 33}, {-38, 17}, {-37, -7}, {-36, -29}, {-35, 24}, {-34, 49}, {-33, -19}, {-32, 2}, {-31, 8}, {-30, 74}, {-29, 58}, {-28, 13}, {-27, -8}, {-26, 45}, {-25, -5}, {-24, 45}, {-23, 19}, {-22, 9}, {-21, 54}, {-20, 1}, {-19, 81}, {-18, 17}, {-17, -10}, {-16, 7}, {-15, 86}, {-14, -3}, {-13, -3}, {-12, 45}, {-11, 93}, {-10, 84}, {-9, 20}, {-8, 3}, {-7, 81}, {-6, 52}, {-5, 67}, {-4, 18}, {-3, 40}, {-2, 42}, {-1, 49}, {0, 7}, {1, 104}, {2, 79}, {3, 37}, {4, 47}, {5, 69}, {6, 89}, {7, 110}, {8, 108}, {9, 19}, {10, 25}, {11, 48}, {12, 63}, {13, 94}, {14, 55}, {15, 119}, {16, 64}, {17, 122}, {18, 92}, {19, 37}, {20, 86}, {21, 84}, {22, 122}, {23, 37}, {24, 125}, {25, 99}, {26, 45}, {27, 63}, {28, 40}, {29, 97}, {30, 78}, {31, 102}, {32, 120}, {33, 91}, {34, 107}, {35, 62}, {36, 137}, {37, 55}, {38, 115}, {39, 46}, {40, 136}, {41, 78}, {42, 86}, {43, 106}, {44, 66}, {45, 141}, {46, 92}, {47, 132}, {48, 89}, {49, 61}, {50, 128}, {51, 155}, {52, 153}, {53, 78}, {54, 114}, {55, 84}, {56, 151}, {57, 123}, {58, 69}, {59, 91}, {60, 89}, {61, 73}, {62, 81}, {63, 139}, {64, 108}, {65, 165}, {66, 92}, {67, 117}, {68, 140}, {69, 109}, {70, 102}, {71, 171}, {72, 141}, {73, 117}, {74, 124}, {75, 171}, {76, 132}, {77, 142}, {78, 107}, {79, 132}, {80, 171}, {81, 104}, {82, 160}, {83, 128}, {84, 137}, {85, 176}, {86, 188}, {87, 178}, {88, 117}, {89, 115}, {90, 140}, {91, 165}, {92, 133}, {93, 114}, {94, 125}, {95, 135}, {96, 144}, {97, 114}, {98, 183}, {99, 157}});
        System.out.println("i = " + i);
        System.out.println("j = " + j);
        System.out.println("k = " + k);
    }

    /**
     * 方法二：贪心算法
     * 思路与算法
     * 我们不妨想一想应该选择哪一个区间作为首个区间。
     * 假设在某一种最优的选择方法中，[l_k, r_k]是首个（即最左侧的）区间，那么它的左侧没有其它区间，右侧有若干个不重叠的区间。
     * 设想一下，如果此时存在一个区间 [l_j, r_j]，使得 r_j < r_kr，
     * 即区间 j 的右端点在区间 k 的左侧，那么我们将区间 k 替换为区间 j，其与剩余右侧被选择的区间仍然是不重叠的。
     * 而当我们将区间 k 替换为区间 j 后，就得到了另一种最优的选择方法。
     * 我们可以不断地寻找右端点在首个区间右端点左侧的新区间，将首个区间替换成该区间。
     * 那么当我们无法替换时，首个区间就是所有可以选择的区间中右端点最小的那个区间。
     * 因此我们将所有区间按照右端点从小到大进行排序，那么排完序之后的首个区间，就是我们选择的首个区间。
     * 如果有多个区间的右端点都同样最小怎么办？由于我们选择的是首个区间，因此在左侧不会有其它的区间，那么左端点在何处是不重要的，我们只要任意选择一个右端点最小的区间即可。
     * 当确定了首个区间之后，所有与首个区间不重合的区间就组成了一个规模更小的子问题。
     * 由于我们已经在初始时将所有区间按照右端点排好序了，因此对于这个子问题，我们无需再次进行排序，只要找出其中与首个区间不重合并且右端点最小的区间即可。
     * 用相同的方法，我们可以依次确定后续的所有区间。
     * 在实际的代码编写中，我们对按照右端点排好序的区间进行遍历，并且实时维护上一个选择区间的右端点 right。
     * 如果当前遍历到的区间 [l_i, r_i]与上一个区间不重合，即 l_i ≥right，那么我们就可以贪心地选择这个区间，并将 right 更新为 r_ir。
     *
     * @param intervals
     * @return
     */
    public int eraseOverlapIntervals(int[][] intervals) {

        if (intervals.length == 0) {
            return 0;
        }

        Arrays.sort(intervals, Comparator.comparingInt(interval -> interval[1]));

        int n = intervals.length;
        int right = intervals[0][1];
        int ans = 1;
        for (int i = 1; i < n; ++i) {
            if (intervals[i][0] >= right) {
                ++ans;
                right = intervals[i][1];
            }
        }
        return n - ans;
    }

    /**
     * 方法一：动态规划
     */
    public int eraseOverlapIntervals2(int[][] intervals) {
        if (intervals.length == 0) {
            return 0;
        }

        Arrays.sort(intervals, Comparator.comparingInt(interval -> interval[0]));

        int n = intervals.length;
        int[] f = new int[n];
        Arrays.fill(f, 1);
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (intervals[j][1] <= intervals[i][0]) {
                    f[i] = Math.max(f[i], f[j] + 1);
                }
            }
        }
        return n - Arrays.stream(f).max().getAsInt();
    }
}
