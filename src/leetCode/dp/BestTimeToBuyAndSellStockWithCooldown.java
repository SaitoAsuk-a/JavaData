package leetCode.dp;

import lombok.experimental.UtilityClass;

/**
 * @author liyu
 * @date 2020/7/10 8:54
 * @description 最佳买卖股票的时机含冻结期
 * 给定一个整数数组，其中第?i?个元素代表了第?i?天的股票价格 。?
 * 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
 * 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
 * 示例:
 * 输入: [1,2,3,0,2]
 * 输出: 3
 * 解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
 * 来源：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown
 */
@UtilityClass
public class BestTimeToBuyAndSellStockWithCooldown {

    public static void main(String[] args) {
        int[] prices={1,2,3,0,2};
        int i = maxProfit(prices);
        System.out.println("i = " + i);

    }

    /**
     * 动态规划
     * 我们用 f[i] 表示第 i天结束之后的「累计最大收益」。根据题目描述，由于我们最多只能同时买入（持有）一支股票，并且卖出股票后有冷冻期的限制，因此我们会有三种不同的状态：
     * 1)我们目前持有一支股票，对应的「累计最大收益」记为 f[i][0]；
     * 2)我们目前不持有任何股票，并且处于冷冻期中，对应的「累计最大收益」记为 f[i][1]；
     * 3)我们目前不持有任何股票，并且不处于冷冻期中，对应的「累计最大收益」记为 f[i][2]。
     * 这里的「处于冷冻期」指的是在第 i 天结束之后的状态。也就是说：如果第 i 天结束之后处于冷冻期，那么第 i+1 天无法买入股票。
     * 如何进行状态转移呢？在第 i 天时，我们可以在不违反规则的前提下进行「买入」或者「卖出」操作，此时第 ii 天的状态会从第 i?1 天的状态转移而来；我们也可以不进行任何操作，此时第 ii 天的状态就等同于第 i-1i?1 天的状态。那么我们分别对这三种状态进行分析：
     * 对于 f[i][0]，我们目前持有的这一支股票可以是在第 i?1 天就已经持有的，对应的状态为 f[i?1][0]；或者是第 i 天买入的，那么第i?1 天就不能持有股票并且不处于冷冻期中，
     * 对应的状态为 f[i-1][2] 加上买入股票的负收益-prices[i]。因此状态转移方程为：
     * f[i][0]=max(f[i?1][0],f[i?1][2]?prices[i])
     * 对于f[i][1]，我们在第 ii 天结束之后处于冷冻期的原因是在当天卖出了股票，那么说明在第 i?1 天时我们必须持有一支股票，
     * 对应的状态为f[i?1][0] 加上卖出股票的正收益 prices[i]。因此状态转移方程为：
     * f[i][1]=f[i?1][0]+prices[i]
     * 对于 f[i][2]f[i][2]，我们在第 i 天结束之后不持有任何股票并且不处于冷冻期，说明当天没有进行任何操作，即第 i?1 天时不持有任何股票：
     * 如果不处于冷冻期，对应的状态为 f[i-1][1]；如果处于冷冻期，对应的状态为 f[i?1][2]。因此状态转移方程为：
     * f[i][2]=max(f[i?1][1],f[i?1][2])
     * 这样我们就得到了所有的状态转移方程。如果一共有 n 天，那么最终的答案即为：
     * max(f[n?1][0],f[n?1][1],f[n?1][2])
     * 注意到如果在最后一天（第 n-1天）结束之后，手上仍然持有股票，那么显然是没有任何意义的。因此更加精确地，最终的答案实际上是 f[n-1][1] 和 f[n-1][2]中的较大值，即：
     * max(f[n?1][1],f[n?1][2])
     * 细节
     * 我们可以将第 0 天的情况作为动态规划中的边界条件：
     * f[0][0] =?prices[0]
     * f[0][1]=0
     * f[0][2]=0
     * @param prices
     * @return
     */
    public int maxProfit(int[] prices) {

        int length = prices.length;
        if(length<1){
            return 0;
        }
        // dp[i][0]: 手上持有股票的最大收益
        // dp[i][1]: 手上不持有股票，并且处于冷冻期中的累计最大收益
        // dp[i][2]: 手上不持有股票，并且不在冷冻期中的累计最大收益
        int[][] dp = new int[length][3];
        //初始持有
        dp[0][0] = -prices[0];
        //初始冷冻
        dp[0][1] = 0;
        //初始不持有
        dp[0][2] = 0;
        for (int i = 1; i < length; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][2] - prices[i]);
            dp[i][1] = dp[i - 1][0] + prices[i];
            dp[i][2] = Math.max(dp[i - 1][1], dp[i - 1][2]);

        }
        return Math.max(dp[length - 1][1], dp[length - 1][2]);

    }

}
